library(available)
install.packages('available')
library(available)
available(tdGBH)
available('tdGBH')
p.mat
license()
#' @param p.mat a matrix of p values. Rows: features, columns: outcomes.
library(usethis)
use_readme_md()
use_readme_rmd()
library(usethis)
use_data_raw()
use_data()
usethis::use_data(DATASET, overwrite = TRUE)
clear
P
laod('data/R.Rdata')
load('data/R.Rdata')
P[1:4,1:4]
rm(P)
library(tdGBH)
dim([])
dim([])
dim(P)
load('data/R.Rdata')
dim(P)
p.mat = P
P
pi0.method = 'storey'
global.pi0.method = 'storey'
shrink = 0.1
pi0 <- structSSI::estimate.pi0(as.vector(p.mat), method =  global.pi0.method)
pi0.o <- apply(p.mat, 2, function(x) structSSI::estimate.pi0(x, method = pi0.method))
pi0.g <- apply(p.mat, 1, function(x) structSSI::estimate.pi0(x, method = pi0.method))
pi0.o <- (1 - shrink) * pi0.o + shrink * pi0
pi0.g <- (1 - shrink)  * pi0.g + shrink * pi0
pi0.o.mat <- t(matrix(pi0.o, nrow = length(pi0.o), ncol = length(pi0.g)))
pi0.g.mat <- matrix(pi0.g, nrow = length(pi0.g), ncol = length(pi0.o))
sd.r <- (sd(pi0.o) / sqrt(length(pi0.o)))  / (sd(pi0.o) / sqrt(length(pi0.o)) + sd(pi0.g) / sqrt(length(pi0.g)))
pi0.og.mat <- sqrt((pi0.o.mat^(2 * sd.r)) * (pi0.g.mat^(2 * (1 - sd.r))))
pi0 <- mean(pi0.og.mat)
ws.og.mat <- (1 - pi0.og.mat) / pi0.og.mat
p.ws.mat <- p.mat / ws.og.mat * (1 - pi0)
p.adj <- matrix(p.adjust(as.vector(p.ws.mat), 'BH'), length(pi0.g), length(pi0.o))
p.adj
rownames(p.mat)
rownames(p.adj)
p.adj <- matrix(p.adjust(as.vector(p.ws.mat), 'BH'), length(pi0.g), length(pi0.o), dimnames = list(rownames(p.mat),colnames(p.mat)))
p.adj
rownames(p.mat) = NULL
colnames(p.mat) = NULL
pi0 <- structSSI::estimate.pi0(as.vector(p.mat), method =  global.pi0.method)
pi0.o <- apply(p.mat, 2, function(x) structSSI::estimate.pi0(x, method = pi0.method))
pi0.g <- apply(p.mat, 1, function(x) structSSI::estimate.pi0(x, method = pi0.method))
pi0.o <- (1 - shrink) * pi0.o + shrink * pi0
pi0.g <- (1 - shrink)  * pi0.g + shrink * pi0
pi0.o.mat <- t(matrix(pi0.o, nrow = length(pi0.o), ncol = length(pi0.g)))
pi0.g.mat <- matrix(pi0.g, nrow = length(pi0.g), ncol = length(pi0.o))
sd.r <- (sd(pi0.o) / sqrt(length(pi0.o)))  / (sd(pi0.o) / sqrt(length(pi0.o)) + sd(pi0.g) / sqrt(length(pi0.g)))
pi0.og.mat <- sqrt((pi0.o.mat^(2 * sd.r)) * (pi0.g.mat^(2 * (1 - sd.r))))
pi0 <- mean(pi0.og.mat)
ws.og.mat <- (1 - pi0.og.mat) / pi0.og.mat
p.ws.mat <- p.mat / ws.og.mat * (1 - pi0)
p.adj <- matrix(p.adjust(as.vector(p.ws.mat), 'BH'), length(pi0.g), length(pi0.o), dimnames = list(rownames(p.mat),colnames(p.mat)))
p.adj
load('data/R.Rdata')
save(data, file = 'data/P.rda')
load('data/P.rda')
tm = load('data/P.rda')
tm
tm
library(tdGBH)
data(P)
P
rm(P)
data(P)
library(tdGBH)
P
write.csv(P,file = 'inst/extdata/P.csv')
library(tdGBH)
data(P)
data
data(data)
load('data-raw/P.rda')
usethis::use_data(data, compress = 'xz', overwrite = T)
library(tdGBH)
P
data
data(P)
data(data)
data
system.file('inst/extdata/','P.rda', package = 'tdGBH')
load('data/data.rda')
data
tm = load('data/data.rda')
tm
data
load('data/data.rda')
tm = load('data/data.rda')
tm
data
tm = load('data-raw/P.rda')
tm
data
load('data-raw/R.Rdata')
tm = load('data-raw/R.Rdata')
tm
P
load('data-raw/R.Rdata')
usethis::use_data(data, compress = 'xz', overwrite = T)
tm = load('data/data.rda')
tm
data
library(roxygen2)
document()
load('data/data.rda')
tm = load('data/data.rda')
tm
data
load('data/P.Rdata')
tm = load('data/P.Rdata')
tm
# Assuming P is loaded in your R environment
save(P, file="data/P.rda")
devtools::document()
devtools::check()
library(tdGBH)
P
